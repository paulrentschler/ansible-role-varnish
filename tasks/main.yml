---
# Install and configure Varnish

##
# Compile and install Varnish
##

- name: "create the src directory"
  ansible.builtin.file:
    path: "/usr/local/src"
    state: directory
    owner: "{{ devops_user|default(ansible_user) }}"
    group: "{{ devops_group|default('adm') }}"
    mode: 0775
  become: yes

- name: "check for installation"
  ansible.builtin.stat:
    path: "/usr/local/sbin/varnishd"
  register: _varnish_installed

- name: compile and install Varnish
  block:
    - name: "install the dependencies"
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - make
        - automake
        - autotools-dev
        - libedit-dev
        - libjemalloc-dev
        - libncurses-dev
        - libpcre3-dev
        - libtool
        - pkg-config
        - python3-docutils
        - python3-sphinx
        - cpio
      become: yes

    - name: "extract the tarball"
      ansible.builtin.unarchive:
        src: "files/varnish-{{ varnish_version }}.tar.gz"
        dest: "/usr/local/src/"
        creates: "/usr/local/src/varnish-{{ varnish_version }}"

    - name: "generate the configure script"
      ansible.builtin.shell:
        cmd: "./autogen.sh"
        chdir: "/usr/local/src/varnish-{{ varnish_version }}"
        creates: "/usr/local/src/varnish-{{ varnish_version }}/autom4te.cache"

    - name: "configure the package"
      ansible.builtin.shell:
        cmd: "./configure"
        chdir: "/usr/local/src/varnish-{{ varnish_version }}"
        creates: "/usr/local/src/varnish-{{ varnish_version }}/Makefile"

    - name: "make the executable"
      community.general.make:
        chdir: "/usr/local/src/varnish-{{ varnish_version }}"

    - name: "install the executable"
      community.general.make:
        chdir: "/usr/local/src/varnish-{{ varnish_version }}"
        target: "install"
      become: yes

    - name: update the dynamic linker run-time bindings
      ansible.builtin.command: ldconfig
      become: yes

    - name: create the varnish share directory
      ansible.builtin.file:
        path: /usr/share/varnish
        owner: root
        group: root
        mode: 0755
        state: directory
      become: yes

    - name: install the reload script
      ansible.builtin.copy:
        src: files/reload-vcl
        dest: /usr/share/varnish/reload-vcl
        owner: root
        group: root
        mode: 0755
      become: yes
  when: not _varnish_installed.stat.exists



##
# Configure Varnish
##
- name: link to the config directory
  ansible.builtin.file:
    src: /usr/local/etc/varnish
    dest: /etc/varnish
    state: link
  become: yes

- name: set the VCL config file
  ansible.builtin.template:
    src: "default-{{ varnish_version }}.vcl.j2"
    dest: /etc/varnish/default.vcl
    owner: root
    group: "{{ devops_group|default('adm') }}"
    mode: 0664
  notify: restart Varnish
  become: yes
  tags:
    - varnish_config

- name: check for existing secret file
  ansible.builtin.stat:
    path: "/etc/varnish/secret"
  register: _varnish_secret_file

- name: create the secret file
  ansible.builtin.template:
    src: secret.j2
    dest: /etc/varnish/secret
    owner: root
    group: root
    mode: 0600
  become: yes
  when: not _varnish_secret_file.stat.exists

- name: set the service script config file
  ansible.builtin.template:
    src: varnish.conf.j2
    dest: /etc/default/varnish
    owner: root
    group: "{{ devops_group|default('adm') }}"
    mode: 0664
  notify: restart Varnish
  become: yes
  tags:
    - varnish_config



##
# Configure it to autostart
##
- name: install the init scripts
  ansible.builtin.copy:
    src: "files/{{ item }}"
    dest: "/etc/init.d/{{ item }}"
    owner: root
    group: root
    mode: 0755
  loop:
    - varnish
    - varnishlog
    - varnishncsa
  become: yes

- name: start Varnish
  ansible.builtin.service:
    name: varnish
    state: started
    enabled: yes
  become: yes

